<link rel="stylesheet" href="/css/codemirror.css">
#parse("/velocity/layout.vm")
#@mainLayout()
<div class="container page-container">
	<div class="row">
		<div class="col s12 tabs-container">
			<ul class="tabs">
				<li class="tab col s6"><a class="active" href="#editor">Editor</a></li>
    			<li class="tab col s6"><a href="#source">Source</a></li>
    			<li class="tab col s6"><a href="#metadata">Metadata</a></li>
  			</ul>
		</div>
		<div id="editor" class="col s12">
			<div id="mapping-body">
			</div>
			<div id="mapping-footer">
				<a id="addStatementBtn" class="btn-floating btn-small grey" href="#">
			      <i class="material-icons">add</i>
			    </a>
			</div>
		</div>
		<div id="source" class="col s12">
			<form id="mappingSourceEditForm" class="col s12">
				<textarea id="code" name="source-content">$mapping.getContent()</textarea>
			</form>
		</div>
		<div id="metadata" class="col s12">
			<form id="mappingMetadataEditForm" class="col s12">
				<div class="row">
					<div class="input-field col s12">
						<input name="name" value="$mapping.getName()" type="text" class="validate" required>
						<label for="name">Name</label>
				  	</div>
				</div>
				<div class="row">
					<div class="input-field col s12">
						<input disabled value="$mapping.getAuthor()" type="text" class="validate">
						<input type="hidden" name="author" value="$mapping.getAuthor()">
						<label for="author">Author</label>
				  	</div>
				</div>
				<div class="row">
					<div class="input-field col s12">
						<input name="uri" value="$mapping.getUri()" type="text" class="validate" required>
						<label for="uri">Name</label>
				  	</div>
				</div>
			</form>
		</div>
    </div>
</div>
<div class="fixed-action-btn" style="bottom: 45px; right: 24px;">
	<a class="btn-floating btn-large red">
  		<i class="large material-icons">menu</i>
	</a>
	<ul>
		<li><a class="btn-floating blue"><i class="material-icons">save</i></a></li>
    </ul>
</div>
#end
<script src="/js/codemirror-compressed.js"></script>
<script type="text/javascript">
	var index=0;
	$('select').material_select();
	$('#addStatementBtn').click(addStatement);
	var mapping = $mappingJson;
	loadMapping(mapping);
	var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
	    mode: "ntriples",
	    viewportMargin: Infinity
	});
	$('ul.tabs').on('click', 'a', function(e) {
		var tabName = e.currentTarget.innerText;
	    if(tabName=="SOURCE") {
	    	var mappingCode = parseMapping();
	    	editor.setValue(mappingCode);
	    	setTimeout(function() {
			    editor.refresh();
			},1);
	    } else if(tabName=="EDITOR") {
	    	$('#mapping-body').html('<div class="col s12 loading-spinner" style="text-align:center;"><div class="preloader-wrapper small active"><div class="spinner-layer spinner-red-only"><div class="circle-clipper left"><div class="circle"></div></div><div class="gap-patch"><div class="circle"></div></div><div class="circle-clipper right"><div class="circle"></div></div></div></div></div>');
	    	$.post( "$WebPath.getMAPPING_TRANSLATE()", { 'content':editor.getValue() }, function( data ) {
	    		$('.loading-spinner').remove();
				loadMapping(data);
			}, "json");
	    }
	});v
	function parseMapping() {
		var mappingCode = "";
		var mappingBody = $('#mapping-body');
		var classSet = {};
		var previousS = "";
		$.each(mappingBody.find('.row'), function() {
			var scol = $(this.getElementsByClassName('scol')[0]);
			var pcol = $(this.getElementsByClassName('pcol')[0]);
			var ocol = $(this.getElementsByClassName('ocol')[0]);
			if(typeof scol.data('additional') != "undefined") {
				var key = scol.data('additional') + "\n\t";
				if(!(key in classSet)) {
					mappingCode += key;
					classSet[key] = "";
				}
			}
			if(scol.data('raw')==previousS)
				mappingCode += "\t";
			mappingCode += scol.data('raw') + " " + pcol.data('raw') + " " + ocol.data('raw')+".\n";
			previousS = scol.data('raw');
		});
		return mappingCode;
	}
	function loadMapping(mapping) {
		var triples = mapping.content;
		var previousVal = "";
		for(i in triples) {
			color = "";
			var subjectVal = triples[i].s.val;
			var subjectRaw = triples[i].s.val;
			var additionalClass = "";
			if(typeof triples[i].s.sem_class != "undefined") {
				subjectVal = triples[i].s.sem_class; 
				color = "black white-text";
				additionalClass = triples[i].s.val + " <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <" + triples[i].s.sem_class_raw + ">.";
			}
			if(typeof triples[i].s.raw != "undefined") {
				subjectRaw = "<"+triples[i].s.raw+">";
			}
			if(subjectVal==previousVal) {
				var subject = $('<div>',{"class":"col s4 scol"}).append($('<div>',{"class":"chip hidden "+color}).html(subjectVal)).data('raw',subjectRaw);
			}
			else {
				var subject = $('<div>',{"class":"col s4 scol"}).append($('<div>',{"class":"chip "+color}).html(subjectVal)).data('raw',subjectRaw);
			}
			if(additionalClass!="") {
				subject.data('additional',additionalClass);
			}
			previousVal = subjectVal;
			var predicate = $('<div>',{"class":"col s4 pcol"}).append("&#8594;").append($('<div>',{"class":"chip white"}).html(triples[i].p.val)).append("&#8594;").data('raw',"<"+triples[i].p.raw+">");
			var objVal = triples[i].o.val;	
			var objRaw = triples[i].o.val;
			color = "grey";
			var icon = "";
			if(typeof triples[i].o.sem_class != "undefined") {
				objVal = triples[i].o.sem_class;
				color = "black white-text"; 
			}
			if(typeof triples[i].o.raw != "undefined") {
				objRaw = "<"+triples[i].o.raw+">";
			}
			if(triples[i].o.type == "binding") {
				color = "grey darken-1";
				icon = "<i class='chip-icon material-icons'>view_module</i>";
				objRaw = '"'+triples[i].o.val+'"^^<http://iot.soton.ac.uk/s2s/s2sml#literalMap>';
			}
			var object = $('<div>',{"class":"col s4 ocol"}).append($('<div>',{"class":"chip "+color+" white-text"}).html(objVal+icon)).data('raw',objRaw);
			var row = $('<div>',{"class":"row add-btn"}).append(subject).append(predicate).append(object);
			$('#mapping-body').append(row);
		}
		initialiseAddBtn();
	}
	function initialiseAddBtn() {
		$('.add-btn').hover(function() {
			var lastCol = $(this).children().last();
			if(lastCol.find('.btn-add').length==0) {
				var btn = $('<a>', {class:"btn-floating grey btn-add",href:"#"}).append('<i class="material-icons">add</i>');
				lastCol.append(btn);
				btn.click(addToSubject);
			}
		},
		function() {
			$(this).children().last().find('.btn-add').remove();
		});
	}
	function addToSubject() {
		var parentRow = $(this).parent().parent();
		var prevSubject = $(this).parent().prev().prev();
		var subject = prevSubject.clone();
		$(subject).data( $(prevSubject).data() );
		subject.find('.chip').addClass('hidden');
		var stRow = $('<div>',{class:"row add-btn"});
		var pCard = $('<div>',{class:"row"}).append($("<div>", {class:"col s12"}).append(createCard("p")));
		var oCard = $('<div>',{class:"row"}).append($("<div>", {class:"col s12"}).append(createCard("o")));
		stRow.append(subject);
		stRow.append($("<div>", {class:"col s4 pcol"}).append(pCard));
		stRow.append($("<div>", {class:"col s4 ocol"}).append(oCard));
		parentRow.after(stRow);	
		initialiseAutocomplete('p-uri-autocomplete');
		$('select').material_select();	
		initialiseAddBtn();
	}
	function addStatement() {
		var stRow = $('<div>',{class:"row add-btn"});
		var sCard = $('<div>',{class:"row"}).append($("<div>", {class:"col s12"}).append(createCard("s")));
		var pCard = $('<div>',{class:"row"}).append($("<div>", {class:"col s12"}).append(createCard("p")));
		var oCard = $('<div>',{class:"row"}).append($("<div>", {class:"col s12"}).append(createCard("o")));
		stRow.append($("<div>", {class:"col s4 scol"}).append(sCard));
		stRow.append($("<div>", {class:"col s4 pcol"}).append(pCard));
		stRow.append($("<div>", {class:"col s4 ocol"}).append(oCard));
		$('#mapping-body').append(stRow);
		initialiseAutocomplete('p-uri-autocomplete');
		$('select').material_select();
		initialiseAddBtn();
	}
	function initialiseAutocomplete(atype) {
		$('input.'+atype).each(function() { //remove any existing dropdowns 
			$(this).next().remove();
		});
		var dataMap = null;
		if(atype=="p-uri-autocomplete") {
			dataMap = JSON.parse(JSON.stringify(mapping.predicates)); //clone object
		}
		if(atype=="bnode_class") {
			dataMap = JSON.parse(JSON.stringify(mapping.classes)); //clone object;
		}
		for(i in dataMap) {	//prepare the datamap
			dataMap[i] = null;
		}
		$('input.'+atype).autocomplete({
		  data: dataMap
		});
	}
	function createCard(cardType) {
		var cardContent = $('<div>',{class:"card-content"});
		var doneBtn = $('<a>',{href:"#"+cardType}).html('Done');
		if(cardType=="p") {
			cardContent.append(createUriBox("p-uri-autocomplete"));
		} else {
			cardContent.append(createSelection(cardType));
			cardContent.append(createUriBox("uri"));
		}
		doneBtn.click(doneClick);
		var cardAction = $('<div>',{class:"card-action close"}).append(doneBtn);
		var card = $('<div>',{class:"card"}).append(cardContent).append(cardAction);
		return card;
	}
	function doneClick() {
		var cardType = $(this).attr('href').slice(1); //remove #
		var col = $(this).parent().parent().parent().parent().parent();
		var autocomplete = col.find('.autocomplete');
		var value = autocomplete.val();
		var sel = col.find('select').val();
		if(value!="") {
			col.html('');
			if(cardType=="p") {
				var chip = $('<div>',{"class":"chip white"}).html(value).data('raw',mapping.predicates[value]);
				col.data('raw',"<"+mapping.predicates[value]+">");
				col.append("&#8594;").append(chip).append("&#8594;");
			} else {
				if(sel=="uri") {
					var chip = $('<div>',{"class":"chip grey white-text"}).html(value);
					col.data('raw',"<"+value+">");
					col.append(chip);
				} else if(sel=="bnode_class") {
					var chip = $('<div>',{"class":"chip black white-text"}).html(value);
					var bnName = "_:bn"+index++;
					col.data('raw',bnName);
					col.data('additional',bnName + " <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <" + mapping.classes[value] + ">.");
					col.append(chip);
				} else if(sel=="binding") {
					var chip = $('<div>',{"class":"chip grey darken-1 white-text"}).html(value+"<i class='chip-icon material-icons'>view_module</i>");
					col.data('raw','"'+value+'"^^<http://iot.soton.ac.uk/s2s/s2sml#literalMap>');
					col.append(chip);
				}					
			}
		}
	}
	function createSelection(cardType) {
		var select = $('<select>',{class:cardType+"-select"}).append('<option value="" disabled>Choose a Node Type</option>');
		select.append('<option value="bnode_class">Blank Node with Class</option>');
		select.append('<option value="uri" selected>URI</option>');
		if(cardType=="o") {
			select.append('<option value="literal">Literal</option>');
			select.append('<option value="binding">Binding</option>');
		}
		select.change(function() {
			var placeHolder = {"uri":"URI or Prefix & URI",
								"bnode_class":"Class Name",
								"literal":"Literal Value",
								"binding":"table.column from Store"};
			var newVal = $(this).val();
			var inputBox = $(this).parent().parent().next().find('input');
			inputBox.attr('class','autocomplete '+newVal);
			inputBox.attr('placeholder',placeHolder[newVal]);
			inputBox.val('');
			initialiseAutocomplete(newVal);
		});
		return $('<p>').append(select);
	}
	function createUriBox(class_name) {
		var box = $('<input>',{class:"autocomplete "+class_name,type:"text",placeholder:"URI or Prefix & URI"});
		return $('<p>').append(box);
	}
</script>